 Step-by-Step Guide for Containerizing and Deploying the Wisecow Application

---

 1. Dockerization

 Steps:
1. Clone the Repository:
    ```sh
    git clone https://github.com/nvrahul/wisecow.git
    cd wisecow
    ```

2. Create a Dockerfile:**
    ```Dockerfile
     Use a base image, e.g., Python 3.9
    FROM python:3.9

     Set the working directory
    WORKDIR /app

     Copy the requirements file
  COPY requirements.txt .

     Install dependencies
    RUN pip install --no-cache-dir -r requirements.txt

     Copy the application code
    COPY . .

     Expose the port the app runs on
    EXPOSE 8000

     Define the command to run the app
    CMD ["python", "app.py"]
    ```

---

 2. Kubernetes Deployment

Steps:

1. Create Deployment Manifest:**
    ```yaml
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: wisecow-deployment
    spec:
      replicas: 3
      selector:
        matchLabels:
          app: wisecow
      template:
        metadata:
          labels:
            app: wisecow
        spec:
          containers:
          - name: wisecow
            image: <your-docker-registry>/wisecow:latest
            ports:
            - containerPort: 8000
    ```

2. **Create Service Manifest:**
    ```yaml
    apiVersion: v1
    kind: Service
    metadata:
      name: wisecow-service
    spec:
      type: LoadBalancer
      ports:
        - port: 80
          targetPort: 8000
      selector:
        app: wisecow
    ```

---

### 3. Continuous Integration and Deployment (CI/CD)

#### Steps:

1. **Create GitHub Actions Workflow:**
    ```yaml
    name: CI/CD Pipeline

    on:
      push:
        branches:
          - main

    jobs:
      build:
        runs-on: ubuntu-latest

        steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Log in to Docker Hub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Build and push Docker image
          uses: docker/build-push-action@v2
          with:
            push: true
            tags: <your-docker-registry>/wisecow:latest

      deploy:
        needs: build
        runs-on: ubuntu-latest

        steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up kubectl
          uses: azure/setup-kubectl@v1
          with:
            version: 'latest'

        - name: Deploy to Kubernetes
          env:
            KUBECONFIG: ${{ secrets.KUBECONFIG }}
          run: |
            kubectl apply -f k8s/deployment.yaml
            kubectl apply -f k8s/service.yaml
    ```

---

### 4. TLS Implementation

#### Steps:

1. **Generate Certificates:**
    - Use a tool like [Let's Encrypt](https://letsencrypt.org/) to generate TLS certificates.

2. **Update Kubernetes Manifests:**
    - Add a secret for TLS:
      ```yaml
      apiVersion: v1
      kind: Secret
      metadata:
        name: wisecow-tls
      data:
        tls.crt: <base64-encoded-cert>
        tls.key: <base64-encoded-key>
      type: kubernetes.io/tls
      ```

3. **Create Ingress Resource:**
    ```yaml
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: wisecow-ingress
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
    spec:
      tls:
      - hosts:
        - wisecow.example.com
        secretName: wisecow-tls
      rules:
      - host: wisecow.example.com
        http:
          paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: wisecow-service
                port:
                  number: 80
    ```

---

### Expected Artifacts

1. **GitHub Repository:**
   - Wisecow application source code.
   - Dockerfile.
   - Kubernetes manifest files (`k8s/deployment.yaml`, `k8s/service.yaml`, `k8s/ingress.yaml`).
   - CI/CD pipeline configuration (`.github/workflows/ci-cd.yml`).

---

### Access Control

- **Set the GitHub repository to public.**

---

### End Goal

- **Containerize and deploy the Wisecow application with an automated CI/CD pipeline and secure it with TLS communication.**

---

Let me know if you need more detailed steps or any specific assistance!
